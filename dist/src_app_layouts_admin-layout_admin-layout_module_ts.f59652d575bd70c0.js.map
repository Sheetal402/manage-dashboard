{"version":3,"file":"src_app_layouts_admin-layout_admin-layout_module_ts.f59652d575bd70c0.js","mappings":"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","sources":["./src/app/layouts/admin-layout/admin-layout.module.ts","./src/app/layouts/admin-layout/admin-layout.routing.ts","./src/app/pages/comment/comment.component.ts","./src/app/pages/comment/comment.component.html","./src/app/pages/dashboard/dashboard.component.ts","./src/app/pages/dashboard/dashboard.component.html","./src/app/pages/notifications/notifications.component.ts","./src/app/pages/notifications/notifications.component.html","./src/app/pages/table/table.component.ts","./src/app/pages/table/table.component.html","./src/app/pages/typography/typography.component.ts","./src/app/pages/typography/typography.component.html","./src/app/pages/upgrade/upgrade.component.ts","./src/app/pages/upgrade/upgrade.component.html","./src/app/pages/user/user.component.ts","./src/app/pages/user/user.component.html","./node_modules/@angular/material/fesm2015/icon.mjs"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { AdminLayoutRoutes } from './admin-layout.routing';\n\nimport { DashboardComponent }       from '../../pages/dashboard/dashboard.component';\nimport { UserComponent }            from '../../pages/user/user.component';\nimport { TableComponent }           from '../../pages/table/table.component';\nimport { TypographyComponent }      from '../../pages/typography/typography.component';\nimport { IconsComponent }           from '../../pages/icons/icons.component';\nimport { CommentComponent }            from '../../pages/comment/comment.component';\nimport { NotificationsComponent }   from '../../pages/notifications/notifications.component';\nimport { UpgradeComponent }         from '../../pages/upgrade/upgrade.component';\nimport { MatTableModule } from '@angular/material/table';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input'\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatIconModule } from '@angular/material/icon';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild(AdminLayoutRoutes),\n    FormsModule,\n    ReactiveFormsModule,\n    NgbModule,\n    MatTableModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatDialogModule,\n    MatIconModule\n  ],\n  declarations: [\n    DashboardComponent,\n    UserComponent,\n    TableComponent,\n    UpgradeComponent,\n    TypographyComponent,\n    IconsComponent,\n    CommentComponent,\n    NotificationsComponent\n  ]\n})\n\nexport class AdminLayoutModule {}\n","import { Routes } from '@angular/router';\n\nimport { DashboardComponent } from '../../pages/dashboard/dashboard.component';\nimport { UserComponent } from '../../pages/user/user.component';\nimport { TableComponent } from '../../pages/table/table.component';\nimport { TypographyComponent } from '../../pages/typography/typography.component';\nimport { IconsComponent } from '../../pages/icons/icons.component';\nimport { CommentComponent } from '../../pages/comment/comment.component';\nimport { NotificationsComponent } from '../../pages/notifications/notifications.component';\nimport { UpgradeComponent } from '../../pages/upgrade/upgrade.component';\nimport { LoginComponent } from 'app/pages/login/login.component';\nimport { WelcomeComponent } from 'app/welcome/welcome.component';\n\nexport const AdminLayoutRoutes: Routes = [\n    { path: 'dashboard',      component: DashboardComponent },\n    { path: 'user',           component: UserComponent },\n    { path: 'table',          component: TableComponent },\n    { path: 'todo',          component: CommentComponent },\n    // { path: 'register',       component: IconsComponent },\n    // { path: 'welcome',        component: WelcomeComponent}\n    // { path: 'maps',           component: MapsComponent },\n    // { path: 'notifications',  component: NotificationsComponent },\n    // { path: 'upgrade',        component: UpgradeComponent }\n];\n","import { Component,OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport Todo from 'app/models/todo';\nimport { TaskService } from 'app/task.service';\nimport { MatDialog, MAT_DIALOG_DATA, MatDialogRef, MatDialogConfig } from '@angular/material/dialog';\nimport { PopupComponent } from '../popup/popup.component';\nimport { EditcommentComponent } from '../editcomment/editcomment.component';\n\ndeclare var google: any;    \n\n@Component({\n    moduleId: module.id,\n    selector: 'comment-cmp',\n    templateUrl: 'comment.component.html',\n    styleUrls: ['comment.component.css']\n})\n\nexport class CommentComponent implements OnInit {\n    inputTodo:string='';  \n    title='todo app';  \n    todos: Todo[];  \n    commentForm: FormGroup;\n\n  constructor(private taskService: TaskService,\n              private dialog: MatDialog) { }  \n  \n  ngOnInit(): void {\n    // b = b.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />');\n    this.initForm();    \n    this.taskService.getComments().subscribe(data => {\n        console.log(\"~~~!!! comment from onInit = \",data);        \n        this.todos=data;\n        // this.commentForm.patchValue(this.todos);\n    });  \n  }\n\n  initForm(){\n    this.commentForm = new FormGroup({\n        inputTodo: new FormControl(\"\",Validators.required)\n    });\n  }\n\n  submit(data){\n    console.log(\"create todo data = \",data);\n    data = data.inputTodo;\n    data = data.replace(/(?:\\r\\n|\\r|\\n)/g, '<br/>');\n    console.log(\"after replace todo data = \",data);\n    let res = this.taskService.createComments(data);\n    // console.log(\"res data = \",res);\n    this.taskService.getComments().subscribe(data => {\n        console.log(\"~~~!!! comment from submit = \",data);        \n        this.todos=data;\n        // this.commentForm.patchValue(this.todos);\n    });\n  }\n\n  // formatText(item) {\n  //   item = item.replace(/(?:\\r\\n|\\r|\\n)/g, '<br/>');\n  //   return item;\n  // }\n\n  edit(item) {\n    const componentName = EditcommentComponent\n    console.log(\"%%% item in edit = \",item);\n    this.openDialog(item,componentName);\n  }\n\n  deleteComment(item) {\n    const componentName = PopupComponent;\n    console.log(\"%%% item = \",item); \n    this.openDialog(item, componentName);\n  }\n\n  openDialog(item, componentName): void {\n    const dialogConfig = new MatDialogConfig();\n\n    dialogConfig.disableClose = true;\n    dialogConfig.autoFocus = true;\n    \n    const dialogRef = this.dialog.open(componentName, {\n      data: {content:item.content,_id:item._id},\n      panelClass: 'mystyle',\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      console.log('The dialog was closed. result = ',result);\n      this.taskService.getComments().subscribe(data => {      \n            this.todos=data; });\n    });\n  }\n\n}\n","<div class=\"row\">\n  <div class=\"col-md-12\">\n    <div class=\"card card-user\">\n      <div class=\"card-header\">\n        <h3 class=\"card-title ta-center\">Comment Section</h3>\n      </div>\n      <div class=\"card-body\">\n        <div class=\"row flex-center\">\n          <div class=\"col-md-6\">\n            <form [formGroup]=\"commentForm\" (ngSubmit)=\"submit(commentForm.value)\">\n              <div class=\"row flex-center\">\n                <div class=\"col-md-10\">\n                  <div class=\"form-group\">\n                    <textarea formControlName=\"inputTodo\" id=\"comment\" class=\"form-control height-width\"\n                      placeholder=\"Add a comment\" value=\"\"></textarea>\n                    <!-- <input type=\"text\" formControlName=\"inputTodo\" id=\"comment\" class=\"form-control\"\n                      placeholder=\"Add a comment\" value=\"\"> -->\n                  </div>\n                </div>\n              </div>\n              <div class=\"row flex-center\">\n                <div class=\"col-md-6\">\n                  <div class=\"form-group\">\n                    <button type=\"submit\" class=\"btn btn-primary btn-round\">Add comment</button>\n                  </div>\n                </div>\n              </div>\n            </form>\n          </div>\n        </div>\n        <div class=\"flex-center\">\n\n          <div *ngFor=\"let todo of todos; let i = index;\" class=\"todo {{(todo.completed ? 'done' : '' )}}\">\n            <div class=\"row PB-5 flex-center flex-display\">\n              <div class=\"col-md-8\">\n                <div class=\"comment-border P-5 text-wrap\">\n                  <span [innerHTML]=\"todo.content\">\n                    <!-- {{todo.content}} -->\n                  </span>\n                </div>\n              </div>\n              <div class=\"flex-display direction-column PT-6\">\n                <span type=\"button\" style=\"background-color: transparent; border: none; color:aqua;\"\n                  (click)=\"edit(todo)\">\n                  <mat-icon>create icon</mat-icon>\n                </span>\n                <span type=\"button\" style=\"background-color: transparent; border: none; color:aqua;\"\n                  (click)=\"deleteComment(todo)\">\n                  <mat-icon>delete</mat-icon>\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n\n<!-- <div class=\"row\">\n  <div class=\"col-md-8\">\n    <div class=\"card card-user\">\n      <div class=\"card-header\">\n        <h5 class=\"card-title\">Comment Section</h5>\n      </div>\n      <div class=\"card-body\">\n        <form [formGroup]=\"commentForm\" (ngSubmit)=\"submit(commentForm.value)\">\n          <div class=\"row\">\n            <div class=\"col-md-10\">\n              <div class=\"form-group\">\n                <label>Add a comment</label>\n                <input type=\"text\" formControlName=\"inputTodo\" id=\"comment\" class=\"form-control\"\n                  placeholder=\"Add a comment\" value=\"\">\n              </div>\n            </div>\n          </div>\n          <div class=\"row\">\n            <div class=\"col-md-12\">\n              <div class=\"form-group\">\n                <button type=\"submit\" class=\"btn btn-primary btn-round\">Add comment</button>\n              </div>\n            </div>\n          </div>\n          </form>\n          <div class=\"row\">\n            <div class=\"col-md-10 pr-1\">\n              <div class=\"form-group\">\n                <div *ngFor=\"let todo of todos; let i = index;\"  class=\"todo {{(todo.completed ? 'done' : '' )}}\">  \n                  <div>{{i}}  {{todo.content}}</div>  \n                  <span>  \n                  <button type=\"button\" style=\"background-color: transparent; border: none; color:aqua;\" (click)=\"edit(todo)\">\n                    <mat-icon>create icon</mat-icon>\n                  </button>\n                </span>\n                  <span>\n                  <button type=\"button\" style=\"background-color: transparent; border: none; color:aqua;\" (click)=\"deleteComment(todo)\">\n                    <mat-icon>Delete</mat-icon> \n                  </button>\n                </span>\n                </div>\n              </div>\n            </div>\n          </div>\n      </div>\n    </div>\n  </div>\n</div> -->","import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport Users from 'app/models/users';\nimport { TaskService } from 'app/task.service';\nimport * as _ from \"lodash\"; \nimport { MatDialog} from '@angular/material/dialog'\nimport { CommentComponent } from '../comment/comment.component';\n\n@Component({\n    selector: 'dashboard-cmp',\n    moduleId: module.id,\n    templateUrl: 'dashboard.component.html'\n})\n\nexport class DashboardComponent implements OnInit{\n    commentForm: FormGroup;\n    userData: Users[] = [];\n    constructor(private router: Router,\n                private taskService: TaskService,\n                public dialog: MatDialog) {\n                  this.taskService.getUsers()\n          .subscribe((data: Users[]) => {console.log(987,\"data = \",data);this.userData = data;});\n    }\n\n    ngOnInit(){\n      console.log(19,\"inside dashboard component\");\n    } \n    submit(comment) {\n      const dialogRef = this.dialog.open(CommentComponent);\n    }\n}\n","<div class=\"row\">\n  <div class=\"col-lg-3 col-md-6 col-sm-6\">\n    <div class=\"card card-stats\">\n      <div class=\"card-body \">\n        <div class=\"row\">\n          <div class=\"col-5 col-md-4\">\n            <div class=\"icon-big text-center icon-warning\">\n              <i class=\"nc-icon nc-globe text-warning\"></i>\n            </div>\n          </div>\n          <div class=\"col-7 col-md-8\">\n            <div class=\"numbers\">\n              <p class=\"card-category\">Students</p>\n              <p class=\"card-title\"> {{userData.length}}\n                <p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<button type=\"submit\" class=\"btn btn-primary btn-round\">Add comment</button>\n\n","import { Component } from '@angular/core';\nimport { ToastrService } from \"ngx-toastr\";\n\n\n@Component({\n    selector: 'notifications-cmp',\n    moduleId: module.id,\n    templateUrl: 'notifications.component.html'\n})\n\nexport class NotificationsComponent{\n  constructor(private toastr: ToastrService) {}\n  showNotification(from, align) {\n    const color = Math.floor(Math.random() * 5 + 1);\n\n    switch (color) {\n      case 1:\n        this.toastr.info(\n        '<span data-notify=\"icon\" class=\"nc-icon nc-bell-55\"></span><span data-notify=\"message\">Welcome to <b>Paper Dashboard Angular</b> - a beautiful bootstrap dashboard for every web developer.</span>',\n          \"\",\n          {\n            timeOut: 4000,\n            closeButton: true,\n            enableHtml: true,\n            toastClass: \"alert alert-info alert-with-icon\",\n            positionClass: \"toast-\" + from + \"-\" + align\n          }\n        );\n        break;\n      case 2:\n        this.toastr.success(\n          '<span data-notify=\"icon\" class=\"nc-icon nc-bell-55\"></span><span data-notify=\"message\">Welcome to <b>Paper Dashboard Angular</b> - a beautiful bootstrap dashboard for every web developer.</span>',\n          \"\",\n          {\n            timeOut: 4000,\n            closeButton: true,\n            enableHtml: true,\n            toastClass: \"alert alert-success alert-with-icon\",\n            positionClass: \"toast-\" + from + \"-\" + align\n          }\n        );\n        break;\n      case 3:\n        this.toastr.warning(\n        '<span data-notify=\"icon\" class=\"nc-icon nc-bell-55\"></span><span data-notify=\"message\">Welcome to <b>Paper Dashboard Angular</b> - a beautiful bootstrap dashboard for every web developer.</span>',\n          \"\",\n          {\n            timeOut: 4000,\n            closeButton: true,\n            enableHtml: true,\n            toastClass: \"alert alert-warning alert-with-icon\",\n            positionClass: \"toast-\" + from + \"-\" + align\n          }\n        );\n        break;\n      case 4:\n        this.toastr.error(\n        '<span data-notify=\"icon\" class=\"nc-icon nc-bell-55\"></span><span data-notify=\"message\">Welcome to <b>Paper Dashboard Angular</b> - a beautiful bootstrap dashboard for every web developer.</span>',\n          \"\",\n          {\n            timeOut: 4000,\n            enableHtml: true,\n            closeButton: true,\n            toastClass: \"alert alert-danger alert-with-icon\",\n            positionClass: \"toast-\" + from + \"-\" + align\n          }\n        );\n        break;\n      case 5:\n        this.toastr.show(\n        '<span data-notify=\"icon\" class=\"nc-icon nc-bell-55\"></span><span data-notify=\"message\">Welcome to <b>Paper Dashboard Angular</b> - a beautiful bootstrap dashboard for every web developer.</span>',\n          \"\",\n          {\n            timeOut: 4000,\n            closeButton: true,\n            enableHtml: true,\n            toastClass: \"alert alert-primary alert-with-icon\",\n            positionClass: \"toast-\" + from + \"-\" + align\n          }\n        );\n        break;\n      default:\n        break;\n    }\n  }\n}\n","<div class=\"row\">\n  <div class=\"col-md-12\">\n    <div class=\"card\">\n      <div class=\"card-header\">\n        <h5 class=\"card-title\">Notifications</h5>\n        <p class=\"card-category\">Handcrafted by our friend\n          <a target=\"_blank\" href=\"https://github.com/mouse0270\">Robert McIntosh</a>. Please checkout the\n          <a href=\"http://bootstrap-notify.remabledesigns.com/\" target=\"_blank\">full documentation.</a>\n        </p>\n      </div>\n      <div class=\"card-body\">\n        <div class=\"row\">\n          <div class=\"col-md-6\">\n            <div class=\"card card-plain\">\n              <div class=\"card-header\">\n                <h5 class=\"card-title\">Notifications Style</h5>\n              </div>\n              <div class=\"card-body\">\n                <div class=\"alert alert-info\">\n                  <span>This is a plain notification</span>\n                </div>\n                <div class=\"alert alert-info alert-dismissible fade show\">\n                  <button type=\"button\" aria-hidden=\"true\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\n                    <i class=\"nc-icon nc-simple-remove\"></i>\n                  </button>\n                  <span>This is a notification with close button.</span>\n                </div>\n                <div class=\"alert alert-info alert-with-icon alert-dismissible fade show\" data-notify=\"container\">\n                  <button type=\"button\" aria-hidden=\"true\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\n                    <i class=\"nc-icon nc-simple-remove\"></i>\n                  </button>\n                  <span data-notify=\"icon\" class=\"nc-icon nc-bell-55\"></span>\n                  <span data-notify=\"message\">This is a notification with close button and icon.</span>\n                </div>\n                <div class=\"alert alert-info alert-with-icon alert-dismissible fade show\" data-notify=\"container\">\n                  <button type=\"button\" aria-hidden=\"true\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\n                    <i class=\"nc-icon nc-simple-remove\"></i>\n                  </button>\n                  <span data-notify=\"icon\" class=\"nc-icon nc-chart-pie-36\"></span>\n                  <span data-notify=\"message\">This is a notification with close button and icon and have many lines. You can see that the icon and the close button are always vertically aligned. This is a beautiful notification. So you don't have to worry about the style.</span>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"col-md-6\">\n            <div class=\"card card-plain\">\n              <div class=\"card-header\">\n                <h5 class=\"card-title\">Notification states</h5>\n              </div>\n              <div class=\"card-body\">\n                <div class=\"alert alert-primary alert-dismissible fade show\">\n                  <button type=\"button\" aria-hidden=\"true\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\n                    <i class=\"nc-icon nc-simple-remove\"></i>\n                  </button>\n                  <span>\n                    <b> Primary - </b> This is a regular notification made with \".alert-primary\"</span>\n                </div>\n                <div class=\"alert alert-info alert-dismissible fade show\">\n                  <button type=\"button\" aria-hidden=\"true\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\n                    <i class=\"nc-icon nc-simple-remove\"></i>\n                  </button>\n                  <span>\n                    <b> Info - </b> This is a regular notification made with \".alert-info\"</span>\n                </div>\n                <div class=\"alert alert-success alert-dismissible fade show\">\n                  <button type=\"button\" aria-hidden=\"true\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\n                    <i class=\"nc-icon nc-simple-remove\"></i>\n                  </button>\n                  <span>\n                    <b> Success - </b> This is a regular notification made with \".alert-success\"</span>\n                </div>\n                <div class=\"alert alert-warning alert-dismissible fade show\">\n                  <button type=\"button\" aria-hidden=\"true\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\n                    <i class=\"nc-icon nc-simple-remove\"></i>\n                  </button>\n                  <span>\n                    <b> Warning - </b> This is a regular notification made with \".alert-warning\"</span>\n                </div>\n                <div class=\"alert alert-danger alert-dismissible fade show\">\n                  <button type=\"button\" aria-hidden=\"true\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\n                    <i class=\"nc-icon nc-simple-remove\"></i>\n                  </button>\n                  <span>\n                    <b> Danger - </b> This is a regular notification made with \".alert-danger\"</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n<div class=\"row\">\n  <div class=\"col-md-12\">\n    <div class=\"card\">\n      <div class=\"card-body\">\n        <div class=\"places-buttons\">\n          <div class=\"row\">\n            <div class=\"col-md-6 ml-auto mr-auto text-center\">\n              <h4 class=\"card-title\">\n                Notifications Places\n                <p class=\"category\">Click to view notifications</p>\n              </h4>\n            </div>\n          </div>\n          <div class=\"row\">\n            <div class=\"col-lg-8 ml-auto mr-auto\">\n              <div class=\"row\">\n                <div class=\"col-md-4\">\n                  <button class=\"btn btn-primary btn-block\" (click)=\"showNotification('top','left')\">Top Left</button>\n                </div>\n                <div class=\"col-md-4\">\n                  <button class=\"btn btn-primary btn-block\" (click)=\"showNotification('top','center')\">Top Center</button>\n                </div>\n                <div class=\"col-md-4\">\n                  <button class=\"btn btn-primary btn-block\" (click)=\"showNotification('top','right')\">Top Right</button>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"row\">\n            <div class=\"col-lg-8 ml-auto mr-auto\">\n              <div class=\"row\">\n                <div class=\"col-md-4\">\n                  <button class=\"btn btn-primary btn-block\" (click)=\"showNotification('bottom','left')\">Bottom Left</button>\n                </div>\n                <div class=\"col-md-4\">\n                  <button class=\"btn btn-primary btn-block\" (click)=\"showNotification('bottom','center')\">Bottom Center</button>\n                </div>\n                <div class=\"col-md-4\">\n                  <button class=\"btn btn-primary btn-block\" (click)=\"showNotification('bottom','right')\">Bottom Right</button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport Users from 'app/models/users';\n\nimport { TaskService } from 'app/task.service';\n\n@Component({\n    selector: 'table-cmp',\n    moduleId: module.id,\n    templateUrl: 'table.component.html'\n})\n\nexport class TableComponent implements OnInit{\n    userData: Users[] = [];\n    colunmsToDisplay = ['fname','lname','address','contact'];\n\n    constructor(private taskService: TaskService) {\n    }\n    ngOnInit(){\n        console.log(11,\"inside table component\");\n        this.taskService.getUsers()\n            .subscribe((data: Users[]) => {console.log(3435,\"data = \",data);this.userData = data;});\n        // console.log(11,this.userData);\n    }\n}\n","<table class=\"tableStyle\" mat-table [dataSource]=\"userData\">\n  <ng-container matColumnDef=\"fname\">\n    <th mat-header-cell *matHeaderCellDef> First Name </th>\n    <td mat-cell *matCellDef=\"let element\"> {{element.fname}} </td>\n  </ng-container>\n\n  \n  <ng-container matColumnDef=\"lname\">\n    <th mat-header-cell *matHeaderCellDef> Last Name </th>\n    <td mat-cell *matCellDef=\"let element\"> {{element.lname}} </td>\n  </ng-container>\n\n  \n  <ng-container matColumnDef=\"address\">\n    <th mat-header-cell *matHeaderCellDef> Address </th>\n    <td mat-cell *matCellDef=\"let element\"> {{element.address}} </td>\n  </ng-container>\n\n  \n  <ng-container matColumnDef=\"contact\">\n    <th mat-header-cell *matHeaderCellDef> Contact </th>\n    <td mat-cell *matCellDef=\"let element\"> {{element.contact}}</td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef=\"colunmsToDisplay\"></tr>\n  <tr mat-row *matRowDef=\"let row; columns: colunmsToDisplay;\"></tr>\n</table>\n\n\n","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'typography-cmp',\n    moduleId: module.id,\n    templateUrl: 'typography.component.html'\n})\n\nexport class TypographyComponent{}\n","<div class=\"row\">\n  <div class=\"col-md-12\">\n    <div class=\"card\">\n      <div class=\"card-header\">\n        <h5 class=\"title\">Paper Table Heading</h5>\n        <p class=\"category\">Created using Montserrat Font Family</p>\n      </div>\n      <div class=\"card-body\">\n        <div class=\"typography-line\">\n          <h1>\n            <span>Header 1</span>The Life of Paper Dashboard </h1>\n        </div>\n        <div class=\"typography-line\">\n          <h2>\n            <span>Header 2</span>The Life of Paper Dashboard </h2>\n        </div>\n        <div class=\"typography-line\">\n          <h3>\n            <span>Header 3</span>The Life of Paper Dashboard </h3>\n        </div>\n        <div class=\"typography-line\">\n          <h4>\n            <span>Header 4</span>The Life of Paper Dashboard </h4>\n        </div>\n        <div class=\"typography-line\">\n          <h5>\n            <span>Header 5</span>The Life of Paper Dashboard </h5>\n        </div>\n        <div class=\"typography-line\">\n          <h6>\n            <span>Header 6</span>The Life of Paper Dashboard </h6>\n        </div>\n        <div class=\"typography-line\">\n          <p>\n            <span>Paragraph</span>\n            I will be the leader of a company that ends up being worth billions of dollars, because I got the answers. I understand culture. I am the nucleus. I think that’s a responsibility that I have, to push possibilities, to show people, this is the level that things could be at.\n          </p>\n        </div>\n        <div class=\"typography-line\">\n          <span>Quote</span>\n          <blockquote>\n            <p class=\"blockquote blockquote-primary\">\n              \"I will be the leader of a company that ends up being worth billions of dollars, because I got the answers. I understand culture. I am the nucleus. I think that’s a responsibility that I have, to push possibilities, to show people, this is the level that things could be at.\"\n              <br>\n              <br>\n              <small>\n                - Noaa\n              </small>\n            </p>\n          </blockquote>\n        </div>\n        <div class=\"typography-line\">\n          <span>Muted Text</span>\n          <p class=\"text-muted\">\n            I will be the leader of a company that ends up being worth billions of dollars, because I got the answers...\n          </p>\n        </div>\n        <div class=\"typography-line\">\n          <span>Primary Text</span>\n          <p class=\"text-primary\">\n            I will be the leader of a company that ends up being worth billions of dollars, because I got the answers...</p>\n        </div>\n        <div class=\"typography-line\">\n          <span>Info Text</span>\n          <p class=\"text-info\">\n            I will be the leader of a company that ends up being worth billions of dollars, because I got the answers... </p>\n        </div>\n        <div class=\"typography-line\">\n          <span>Success Text</span>\n          <p class=\"text-success\">\n            I will be the leader of a company that ends up being worth billions of dollars, because I got the answers... </p>\n        </div>\n        <div class=\"typography-line\">\n          <span>Warning Text</span>\n          <p class=\"text-warning\">\n            I will be the leader of a company that ends up being worth billions of dollars, because I got the answers...\n          </p>\n        </div>\n        <div class=\"typography-line\">\n          <span>Danger Text</span>\n          <p class=\"text-danger\">\n            I will be the leader of a company that ends up being worth billions of dollars, because I got the answers... </p>\n        </div>\n        <div class=\"typography-line\">\n          <h2>\n            <span>Small Tag</span>\n            Header with small subtitle\n            <br>\n            <small>Use \"small\" tag for the headers</small>\n          </h2>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n    selector: 'upgrade-cmp',\n    moduleId: module.id,\n    templateUrl: 'upgrade.component.html'\n})\n\nexport class UpgradeComponent implements OnInit{\n    ngOnInit(){\n    }\n}\n","<div class=\"row\">\n  <div class=\"col-md-8 ml-auto mr-auto\">\n    <div class=\"card card-upgrade\">\n      <div class=\"card-header text-center\">\n        <h4 class=\"card-title\">Paper Dashboard PRO Angular</h4>\n          <p class=\"card-category\">Are you looking for more components? Please check our Premium Version of Paper Dashboard PRO.</p>\n      </div>\n      <div class=\"card-body\">\n        <div class=\"table-responsive table-upgrade\">\n          <table class=\"table\">\n            <thead>\n              <th></th>\n              <th class=\"text-center\">Free</th>\n              <th class=\"text-center\">PRO</th>\n            </thead>\n            <tbody>\n              <tr>\n                <td>Components</td>\n                <td class=\"text-center\">16</td>\n                <td class=\"text-center\">160</td>\n              </tr>\n              <tr>\n                <td>Plugins</td>\n                <td class=\"text-center\">4</td>\n                <td class=\"text-center\">15</td>\n              </tr>\n              <tr>\n                <td>Example Pages</td>\n                <td class=\"text-center\">7</td>\n                <td class=\"text-center\">27</td>\n              </tr>\n              <tr>\n                <td>Login, Register, Pricing, Lock Pages</td>\n                <td class=\"text-center\"><i class=\"nc-icon nc-simple-remove text-danger\"></i></td>\n                <td class=\"text-center\"><i class=\"nc-icon nc-check-2 text-success\"></i></td>\n              </tr>\n              <tr>\n                <td>DataTables, VectorMap, SweetAlert, Wizard, FullCalendar etc...</td>\n                <td class=\"text-center\"><i class=\"nc-icon nc-simple-remove text-danger\"></i></td>\n                <td class=\"text-center\"><i class=\"nc-icon nc-check-2 text-success\"></i></td>\n              </tr>\n              <tr>\n                <td>Mini Sidebar</td>\n                <td class=\"text-center\"><i class=\"nc-icon nc-simple-remove text-danger\"></i></td>\n                <td class=\"text-center\"><i class=\"nc-icon nc-check-2 text-success\"></i></td>\n              </tr>\n              <tr>\n                <td>Premium Support</td>\n                <td class=\"text-center\"><i class=\"nc-icon nc-simple-remove text-danger\"></i></td>\n                <td class=\"text-center\"><i class=\"nc-icon nc-check-2 text-success\"></i></td>\n              </tr>\n              <tr>\n                <td></td>\n                <td class=\"text-center\">Free</td>\n                <td class=\"text-center\">Just $49</td>\n              </tr>\n              <tr>\n                <td class=\"text-center\"></td>\n                <td class=\"text-center\">\n                  <a href=\"#\" class=\"btn btn-round btn-default disabled\">Current Version</a>\n                </td>\n                <td class=\"text-center\">\n                  <a target=\"_blank\" href=\"https://www.creative-tim.com/product/paper-dashboard-pro-angular?ref=pd-free-angular-upgrade-live\" class=\"btn btn-round btn-primary\">Upgrade to PRO</a>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport Users from 'app/models/users';\nimport { TaskService } from 'app/task.service';\nimport * as _ from 'lodash';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n    selector: 'user-cmp',\n    moduleId: module.id,\n    templateUrl: 'user.component.html',\n    styleUrls: [\"./user.component.css\"]\n})\n\nexport class UserComponent implements OnInit{\n    updateUserForm : FormGroup;\n    // userData: any;\n    userData: any;\n    res : any;\n    base64String : any;\n    profilepic: any;\n\n    constructor(private taskService: TaskService, public http: HttpClient) {\n        \n    }\n\n    async ngOnInit(){\n        this.initRegistrationForm()\n        console.log(13,\"inside user component\");\n        await this.taskService.getLoggedUser().subscribe((data) => {\n                console.log(336699,\"data in user = \",data);\n                this.userData=data;\n                this.updateUserForm.patchValue(this.userData);\n                // console.log(\"Data = \",data.profilepic.name);\n                this.base64String = this.arrayBufferToBase64(data.profilepic.data.data);\n                // console.log(\"base64String = \",this.base64String);\n        });  \n        // console.log(12355,\"userdata in update = \",this.userData);\n                \n    }\n\n    initRegistrationForm() {\n        this.updateUserForm = new FormGroup({\n            fname: new FormControl(\"\",[Validators.required, Validators.minLength(3), Validators.maxLength(50), Validators.pattern('[a-zA-Z][a-zA-Z ]+')]),\n            lname: new FormControl(\"\",[Validators.required, Validators.minLength(1), Validators.maxLength(50), Validators.pattern('[a-zA-Z][a-zA-Z ]+')]),\n            address: new FormControl(\"\",[Validators.required, Validators.minLength(5), Validators.maxLength(255)]),\n            profilepic: new FormControl(\"\"),\n            img: new FormControl(\"\"),\n            contact: new FormControl(\"\",[Validators.required, Validators.minLength(10)]),\n            email: new FormControl(\"\",[Validators.required, Validators.minLength(5), Validators.maxLength(255), Validators.pattern('[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$')]),\n            // password: new FormControl(\"\",[Validators.required, Validators.minLength(8), Validators.maxLength(1024), Validators.pattern('^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*_=+-]).{8,12}$')]),\n            // cpassword: new FormControl(\"\",[Validators.required, Validators.minLength(8), Validators.maxLength(1024), Validators.pattern('^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*_=+-]).{8,12}$')])\n        })\n    }\n\n    arrayBufferToBase64(buffer: ArrayBuffer): string {\n        let binary = '';\n        const bytes = new Uint8Array(buffer);\n        const len = bytes.byteLength;\n        for (let i = 0; i < len; i++) {\n          binary += String.fromCharCode(bytes[i]);\n        }\n        return btoa(binary);\n      }\n\n    onFileSelected(event) {\n        this.profilepic = event.target.files[0];\n        console.log(\"profile pic = \", this.profilepic);\n\n        // var reader = new FileReader();\n      \n        // var imgtag = document.getElementsByName(\"this.updateUserForm?.controls?.img\");\n        // imgtag.item.arguments.title = this.profilepic.name;\n      \n        // reader.onload = function(event) {\n        //     imgtag.item.arguments.src = event.target.result;\n        // };\n        // reader.readAsDataURL(this.profilepic);\n\n        // var selectedFile = event.target.files[0];\n        // var reader = new FileReader();\n      \n        // var imgtag = document.getElementsByName(\"this.updateUserForm?.controls?.img\");\n        // // imgtag.title = selectedFile.name;\n        // imgtag.item.arguments.title = selectedFile.name;\n      \n        // reader.onload = function(event) {\n        // //   imgtag.src = event.target.result;\n        // imgtag.item.arguments.src = event.target.result;\n        // };\n        // reader.readAsDataURL(selectedFile);\n    }\n\n    submit(data) {\n        console.log(321,\"data b4 api call\",this.updateUserForm.get('address'));\n\n    //    const formdata = new FormData();\n\n    //    formdata.append('_id', data._id);\n    //    formdata.append('fname',data.fname);\n    //    formdata.append('lname',data.lname);\n    //    formdata.append('address',data.address);\n    //    formdata.append('profilepic',this.profilepic);\n    //    formdata.append('contact',data.contact);\n    //    formdata.append('email',data.email);\n    //    formdata.append('password',data.password);\n    //    formdata.append('cpassword',data.cpassword);\n    //    console.log(\"%%form data user = \",formdata);\n\n    //    let res = this.taskService.updateUsers(formdata);\n    //    console.log(333,\"this is res\", res);\n\n    //    formdata.\n    //    let res = this.taskService.createUsers(formdata.get('fname'),formdata.get(lname),formdata[0].address,formdata[0].profilepic,formdata[0].contact,formdata[0].email,formdata[0].password,formdata[0].cpassword);\n        // let res = this.taskService.createUsers(formdata);\n    //    console.log(333,\"this is res\", res);\n\n\n        // let res = this.taskService.updateUsers(this.userData._id,data.fname,data.lname,data.address,data.profilepic,data.contact,data.email,data.password,data.cpassword);\n        // console.log(333,\"this is res\", res);\n    }\n}\n","<div class=\"row\">\n  <div class=\"col-md-8\">\n    <div class=\"card card-user\">\n      <div class=\"card-header\">\n        <h5 class=\"card-title\">Update Student Profile</h5>\n      </div>\n      <div class=\"card-body\">\n        <form [formGroup]=\"updateUserForm\" (ngSubmit)=\"submit(updateUserForm.value)\" enctype=\"multipart/form-data\">\n          <div class=\"row\">\n            <div class=\"col-md-6 pr-1\">\n              <div class=\"form-group\">\n                <label>First Name*</label>\n                <input type=\"text\" formControlName=\"fname\" id=\"fname\" class=\"form-control\">\n              </div>\n            </div>\n            <div class=\"col-md-6 pl-1\">\n              <div class=\"form-group\">\n                <label>Last Name*</label>\n                <input type=\"text\" formControlName=\"lname\" id=\"lname\" class=\"form-control\">\n              </div>\n            </div>\n          </div>\n          <div class=\"row\">\n            <div class=\"col-md-12\">\n              <div class=\"form-group\">\n                <label>Address*</label>\n                <input type=\"text\" formControlName=\"address\" id=\"address\" class=\"form-control\">\n              </div>\n            </div>\n          </div>\n          <div class=\"row\">\n            <div class=\"col-md-12\">\n              <div class=\"form-group\">\n                <img class=\"image-style\" [src]=\"'data:image/png;base64,' + base64String\" id=\"img\" alt=\"profilePic\"><label>Profile Picture*</label>\n                <!-- <input type=\"file\" id=\"profilepic\" class=\"form-control\"\n                  onchange=\"onFileSelected(event)\" onload=\"onFileSelected(event)\"> -->\n                  <input type=\"file\" (change)=\"onFileSelected($event)\" id=\"profilepic\" class=\"form-control\"\n                  placeholder=\"Profile Picture\">\n                <!-- <button class=\"btn btn-success\" >Upload</button> -->\n              </div>\n            </div>\n          </div>\n          <div class=\"row\">\n            <div class=\"col-md-4 pr-1\">\n              <div class=\"form-group\">\n                <label>Contact Number*</label>\n                <input type=\"text\" formControlName=\"contact\" id=\"contact\" class=\"form-control\">\n              </div>\n            </div>\n            <div class=\"col-md-4 px-1\">\n              <div class=\"form-group\">\n                <label for=\"exampleInputEmail1\">Email address*</label>\n                <input type=\"email\" formControlName=\"email\" id=\"email\" disabled class=\"form-control\">\n              </div>\n            </div>\n          </div>\n          <!-- <div class=\"row\">\n            <div class=\"col-md-6 pr-1\">\n              <div class=\"form-group\">\n                <label>Password*</label>\n                <input type=\"password\" formControlName=\"password\" id=\"password\" class=\"form-control\">\n              </div>\n              <div *ngIf=\"updateUserForm.controls.password1.invalid &&\n                          updateUserForm.controls.password1.touched\">\n                <small *ngIf=\"updateUserForm.controls.password1.errors.required\">Password Required</small>\n                <small *ngIf=\"updateUserForm.controls.password1.errors.pattern\">Invalid Password</small>\n              </div>\n            </div>\n            <div class=\"col-md-6 pl-1\">\n              <div class=\"form-group\">\n                <label>Confirm Password*</label>\n                <input type=\"password\" formControlName=\"cpassword\" id=\"cpassword\" class=\"form-control\">\n              </div>\n              <div *ngIf=\"updateUserForm.controls.cpassword.invalid &&\n                          updateUserForm.controls.cpassword.touched\">\n                <small *ngIf=\"updateUserForm.controls.cpassword.errors.required\">Confirm Password Required</small>\n                <small *ngIf=\"(updateUserForm.controls.cpassword.errors.pattern)||(updateUserForm.controls.cpassword.value !== registrationForm.controls.password.value)\">Invalid Password/password doesn't match</small>\n              </div>\n            </div>\n          </div> -->\n          <div class=\"row\">\n            <div class=\"update ml-auto mr-auto\">\n              <button type=\"submit\" class=\"btn btn-primary btn-round\">Update</button>\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n  </div>\n</div>\n\n\n\n\n<!-- <div class=\"row\">\n  <div class=\"col-md-8\">\n    <div class=\"card card-user\">\n      <div class=\"card-header\">\n        <h5 class=\"card-title\">Edit Student Profile</h5>\n      </div>\n      <div class=\"card-body\">\n        <form>\n          <div class=\"row\">\n            <div class=\"col-md-5 pr-1\">\n              <div class=\"form-group\">\n                <label>Company (disabled)</label>\n                <input type=\"text\" class=\"form-control\" disabled=\"\" placeholder=\"Company\" value=\"Creative Code Inc.\">\n              </div>\n            </div>\n            <div class=\"col-md-3 px-1\">\n              <div class=\"form-group\">\n                <label>Username</label>\n                <input type=\"text\" class=\"form-control\" placeholder=\"Username\" value=\"michael23\">\n              </div>\n            </div>\n            <div class=\"col-md-4 pl-1\">\n              <div class=\"form-group\">\n                <label for=\"exampleInputEmail1\">Email address</label>\n                <input type=\"email\" class=\"form-control\" placeholder=\"Email\">\n              </div>\n            </div>\n          </div>\n          <div class=\"row\">\n            <div class=\"col-md-6 pr-1\">\n              <div class=\"form-group\">\n                <label>First Name</label>\n                <input type=\"text\" class=\"form-control\" placeholder=\"Company\" value=\"Chet\">\n              </div>\n            </div>\n            <div class=\"col-md-6 pl-1\">\n              <div class=\"form-group\">\n                <label>Last Name</label>\n                <input type=\"text\" class=\"form-control\" placeholder=\"Last Name\" value=\"Faker\">\n              </div>\n            </div>\n          </div>\n          <div class=\"row\">\n            <div class=\"col-md-12\">\n              <div class=\"form-group\">\n                <label>Address</label>\n                <input type=\"text\" class=\"form-control\" placeholder=\"Home Address\" value=\"Melbourne, Australia\">\n              </div>\n            </div>\n          </div>\n          <div class=\"row\">\n            <div class=\"col-md-4 pr-1\">\n              <div class=\"form-group\">\n                <label>City</label>\n                <input type=\"text\" class=\"form-control\" placeholder=\"City\" value=\"Melbourne\">\n              </div>\n            </div>\n            <div class=\"col-md-4 px-1\">\n              <div class=\"form-group\">\n                <label>Country</label>\n                <input type=\"text\" class=\"form-control\" placeholder=\"Country\" value=\"Australia\">\n              </div>\n            </div>\n            <div class=\"col-md-4 pl-1\">\n              <div class=\"form-group\">\n                <label>Postal Code</label>\n                <input type=\"number\" class=\"form-control\" placeholder=\"ZIP Code\">\n              </div>\n            </div>\n          </div>\n          <div class=\"row\">\n            <div class=\"col-md-12\">\n              <div class=\"form-group\">\n                <label>About Me</label>\n                <textarea class=\"form-control textarea\">Oh so, your weak rhyme You doubt I'll bother, reading into it</textarea>\n              </div>\n            </div>\n          </div>\n          <div class=\"row\">\n            <div class=\"update ml-auto mr-auto\">\n              <button type=\"submit\" class=\"btn btn-primary btn-round\">Update Profile</button>\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n  </div>\n</div> -->\n","import * as i0 from '@angular/core';\nimport { SecurityContext, Injectable, Optional, Inject, SkipSelf, ErrorHandler, InjectionToken, inject, Component, ViewEncapsulation, ChangeDetectionStrategy, Attribute, Input, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOCUMENT } from '@angular/common';\nimport { of, throwError, forkJoin, Subscription } from 'rxjs';\nimport { tap, map, catchError, finalize, share, take } from 'rxjs/operators';\nimport * as i1 from '@angular/common/http';\nimport { HttpClient } from '@angular/common/http';\nimport * as i2 from '@angular/platform-browser';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The Trusted Types policy, or null if Trusted Types are not\n * enabled/supported, or undefined if the policy has not been created yet.\n */\nlet policy;\n/**\n * Returns the Trusted Types policy, or null if Trusted Types are not\n * enabled/supported. The first call to this function will create the policy.\n */\nfunction getPolicy() {\n    if (policy === undefined) {\n        policy = null;\n        if (typeof window !== 'undefined') {\n            const ttWindow = window;\n            if (ttWindow.trustedTypes !== undefined) {\n                policy = ttWindow.trustedTypes.createPolicy('angular#components', {\n                    createHTML: (s) => s,\n                });\n            }\n        }\n    }\n    return policy;\n}\n/**\n * Unsafely promote a string to a TrustedHTML, falling back to strings when\n * Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that the\n * provided string will never cause an XSS vulnerability if used in a context\n * that will be interpreted as HTML by a browser, e.g. when assigning to\n * element.innerHTML.\n */\nfunction trustedHTMLFromString(html) {\n    var _a;\n    return ((_a = getPolicy()) === null || _a === void 0 ? void 0 : _a.createHTML(html)) || html;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nfunction getMatIconNameNotFoundError(iconName) {\n    return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\nfunction getMatIconNoHttpProviderError() {\n    return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n        'Please include the HttpClientModule from @angular/common/http in your ' +\n        'app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nfunction getMatIconFailedToSanitizeUrlError(url) {\n    return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n        `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nfunction getMatIconFailedToSanitizeLiteralError(literal) {\n    return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n        `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n    constructor(url, svgText, options) {\n        this.url = url;\n        this.svgText = svgText;\n        this.options = options;\n    }\n}\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nclass MatIconRegistry {\n    constructor(_httpClient, _sanitizer, document, _errorHandler) {\n        this._httpClient = _httpClient;\n        this._sanitizer = _sanitizer;\n        this._errorHandler = _errorHandler;\n        /**\n         * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n         */\n        this._svgIconConfigs = new Map();\n        /**\n         * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n         * Multiple icon sets can be registered under the same namespace.\n         */\n        this._iconSetConfigs = new Map();\n        /** Cache for icons loaded by direct URLs. */\n        this._cachedIconsByUrl = new Map();\n        /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n        this._inProgressUrlFetches = new Map();\n        /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n        this._fontCssClassesByAlias = new Map();\n        /** Registered icon resolver functions. */\n        this._resolvers = [];\n        /**\n         * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n         * The default 'material-icons' value assumes that the material icon font has been loaded as\n         * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n         */\n        this._defaultFontSetClass = 'material-icons';\n        this._document = document;\n    }\n    /**\n     * Registers an icon by URL in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIcon(iconName, url, options) {\n        return this.addSvgIconInNamespace('', iconName, url, options);\n    }\n    /**\n     * Registers an icon using an HTML string in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteral(iconName, literal, options) {\n        return this.addSvgIconLiteralInNamespace('', iconName, literal, options);\n    }\n    /**\n     * Registers an icon by URL in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIconInNamespace(namespace, iconName, url, options) {\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, null, options));\n    }\n    /**\n     * Registers an icon resolver function with the registry. The function will be invoked with the\n     * name and namespace of an icon when the registry tries to resolve the URL from which to fetch\n     * the icon. The resolver is expected to return a `SafeResourceUrl` that points to the icon,\n     * an object with the icon URL and icon options, or `null` if the icon is not supported. Resolvers\n     * will be invoked in the order in which they have been registered.\n     * @param resolver Resolver function to be registered.\n     */\n    addSvgIconResolver(resolver) {\n        this._resolvers.push(resolver);\n        return this;\n    }\n    /**\n     * Registers an icon using an HTML string in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteralInNamespace(namespace, iconName, literal, options) {\n        const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n        // TODO: add an ngDevMode check\n        if (!cleanLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        // Security: The literal is passed in as SafeHtml, and is thus trusted.\n        const trustedLiteral = trustedHTMLFromString(cleanLiteral);\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig('', trustedLiteral, options));\n    }\n    /**\n     * Registers an icon set by URL in the default namespace.\n     * @param url\n     */\n    addSvgIconSet(url, options) {\n        return this.addSvgIconSetInNamespace('', url, options);\n    }\n    /**\n     * Registers an icon set using an HTML string in the default namespace.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteral(literal, options) {\n        return this.addSvgIconSetLiteralInNamespace('', literal, options);\n    }\n    /**\n     * Registers an icon set by URL in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param url\n     */\n    addSvgIconSetInNamespace(namespace, url, options) {\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url, null, options));\n    }\n    /**\n     * Registers an icon set using an HTML string in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteralInNamespace(namespace, literal, options) {\n        const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n        if (!cleanLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        // Security: The literal is passed in as SafeHtml, and is thus trusted.\n        const trustedLiteral = trustedHTMLFromString(cleanLiteral);\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig('', trustedLiteral, options));\n    }\n    /**\n     * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n     * component with the alias as the fontSet input will cause the class name to be applied\n     * to the `<mat-icon>` element.\n     *\n     * @param alias Alias for the font.\n     * @param className Class name override to be used instead of the alias.\n     */\n    registerFontClassAlias(alias, className = alias) {\n        this._fontCssClassesByAlias.set(alias, className);\n        return this;\n    }\n    /**\n     * Returns the CSS class name associated with the alias by a previous call to\n     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n     */\n    classNameForFontAlias(alias) {\n        return this._fontCssClassesByAlias.get(alias) || alias;\n    }\n    /**\n     * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     *\n     * @param className\n     */\n    setDefaultFontSetClass(className) {\n        this._defaultFontSetClass = className;\n        return this;\n    }\n    /**\n     * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     */\n    getDefaultFontSetClass() {\n        return this._defaultFontSetClass;\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n     * The response from the URL may be cached so this will not always cause an HTTP request, but\n     * the produced element will always be a new copy of the originally fetched icon. (That is,\n     * it will not contain any modifications made to elements previously returned).\n     *\n     * @param safeUrl URL from which to fetch the SVG icon.\n     */\n    getSvgIconFromUrl(safeUrl) {\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        const cachedIcon = this._cachedIconsByUrl.get(url);\n        if (cachedIcon) {\n            return of(cloneSvg(cachedIcon));\n        }\n        return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl, null)).pipe(tap(svg => this._cachedIconsByUrl.set(url, svg)), map(svg => cloneSvg(svg)));\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n     * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n     * if not, the Observable will throw an error.\n     *\n     * @param name Name of the icon to be retrieved.\n     * @param namespace Namespace in which to look for the icon.\n     */\n    getNamedSvgIcon(name, namespace = '') {\n        const key = iconKey(namespace, name);\n        let config = this._svgIconConfigs.get(key);\n        // Return (copy of) cached icon if possible.\n        if (config) {\n            return this._getSvgFromConfig(config);\n        }\n        // Otherwise try to resolve the config from one of the resolver functions.\n        config = this._getIconConfigFromResolvers(namespace, name);\n        if (config) {\n            this._svgIconConfigs.set(key, config);\n            return this._getSvgFromConfig(config);\n        }\n        // See if we have any icon sets registered for the namespace.\n        const iconSetConfigs = this._iconSetConfigs.get(namespace);\n        if (iconSetConfigs) {\n            return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n        }\n        return throwError(getMatIconNameNotFoundError(key));\n    }\n    ngOnDestroy() {\n        this._resolvers = [];\n        this._svgIconConfigs.clear();\n        this._iconSetConfigs.clear();\n        this._cachedIconsByUrl.clear();\n    }\n    /**\n     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n     */\n    _getSvgFromConfig(config) {\n        if (config.svgText) {\n            // We already have the SVG element for this icon, return a copy.\n            return of(cloneSvg(this._svgElementFromConfig(config)));\n        }\n        else {\n            // Fetch the icon from the config's URL, cache it, and return a copy.\n            return this._loadSvgIconFromConfig(config).pipe(map(svg => cloneSvg(svg)));\n        }\n    }\n    /**\n     * Attempts to find an icon with the specified name in any of the SVG icon sets.\n     * First searches the available cached icons for a nested element with a matching name, and\n     * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n     * that have not been cached, and searches again after all fetches are completed.\n     * The returned Observable produces the SVG element if possible, and throws\n     * an error if no icon with the specified name can be found.\n     */\n    _getSvgFromIconSetConfigs(name, iconSetConfigs) {\n        // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n        // requested name.\n        const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n        if (namedIcon) {\n            // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n            // time anyway, there's probably not much advantage compared to just always extracting\n            // it from the icon set.\n            return of(namedIcon);\n        }\n        // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n        // fetched, fetch them now and look for iconName in the results.\n        const iconSetFetchRequests = iconSetConfigs\n            .filter(iconSetConfig => !iconSetConfig.svgText)\n            .map(iconSetConfig => {\n            return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(catchError((err) => {\n                const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n                // Swallow errors fetching individual URLs so the\n                // combined Observable won't necessarily fail.\n                const errorMessage = `Loading icon set URL: ${url} failed: ${err.message}`;\n                this._errorHandler.handleError(new Error(errorMessage));\n                return of(null);\n            }));\n        });\n        // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n        // cached SVG element (unless the request failed), and we can check again for the icon.\n        return forkJoin(iconSetFetchRequests).pipe(map(() => {\n            const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n            // TODO: add an ngDevMode check\n            if (!foundIcon) {\n                throw getMatIconNameNotFoundError(name);\n            }\n            return foundIcon;\n        }));\n    }\n    /**\n     * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    _extractIconWithNameFromAnySet(iconName, iconSetConfigs) {\n        // Iterate backwards, so icon sets added later have precedence.\n        for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n            const config = iconSetConfigs[i];\n            // Parsing the icon set's text into an SVG element can be expensive. We can avoid some of\n            // the parsing by doing a quick check using `indexOf` to see if there's any chance for the\n            // icon to be in the set. This won't be 100% accurate, but it should help us avoid at least\n            // some of the parsing.\n            if (config.svgText && config.svgText.toString().indexOf(iconName) > -1) {\n                const svg = this._svgElementFromConfig(config);\n                const foundIcon = this._extractSvgIconFromSet(svg, iconName, config.options);\n                if (foundIcon) {\n                    return foundIcon;\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     */\n    _loadSvgIconFromConfig(config) {\n        return this._fetchIcon(config).pipe(tap(svgText => (config.svgText = svgText)), map(() => this._svgElementFromConfig(config)));\n    }\n    /**\n     * Loads the content of the icon set URL specified in the\n     * SvgIconConfig and attaches it to the config.\n     */\n    _loadSvgIconSetFromConfig(config) {\n        if (config.svgText) {\n            return of(null);\n        }\n        return this._fetchIcon(config).pipe(tap(svgText => (config.svgText = svgText)));\n    }\n    /**\n     * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    _extractSvgIconFromSet(iconSet, iconName, options) {\n        // Use the `id=\"iconName\"` syntax in order to escape special\n        // characters in the ID (versus using the #iconName syntax).\n        const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n        if (!iconSource) {\n            return null;\n        }\n        // Clone the element and remove the ID to prevent multiple elements from being added\n        // to the page with the same ID.\n        const iconElement = iconSource.cloneNode(true);\n        iconElement.removeAttribute('id');\n        // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n        // the content of a new <svg> node.\n        if (iconElement.nodeName.toLowerCase() === 'svg') {\n            return this._setSvgAttributes(iconElement, options);\n        }\n        // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n        // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n        // tag is problematic on Firefox, because it needs to include the current page path.\n        if (iconElement.nodeName.toLowerCase() === 'symbol') {\n            return this._setSvgAttributes(this._toSvgElement(iconElement), options);\n        }\n        // createElement('SVG') doesn't work as expected; the DOM ends up with\n        // the correct nodes, but the SVG content doesn't render. Instead we\n        // have to create an empty SVG node using innerHTML and append its content.\n        // Elements created using DOMParser.parseFromString have the same problem.\n        // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n        const svg = this._svgElementFromString(trustedHTMLFromString('<svg></svg>'));\n        // Clone the node so we don't remove it from the parent icon set element.\n        svg.appendChild(iconElement);\n        return this._setSvgAttributes(svg, options);\n    }\n    /**\n     * Creates a DOM element from the given SVG string.\n     */\n    _svgElementFromString(str) {\n        const div = this._document.createElement('DIV');\n        div.innerHTML = str;\n        const svg = div.querySelector('svg');\n        // TODO: add an ngDevMode check\n        if (!svg) {\n            throw Error('<svg> tag not found');\n        }\n        return svg;\n    }\n    /**\n     * Converts an element into an SVG node by cloning all of its children.\n     */\n    _toSvgElement(element) {\n        const svg = this._svgElementFromString(trustedHTMLFromString('<svg></svg>'));\n        const attributes = element.attributes;\n        // Copy over all the attributes from the `symbol` to the new SVG, except the id.\n        for (let i = 0; i < attributes.length; i++) {\n            const { name, value } = attributes[i];\n            if (name !== 'id') {\n                svg.setAttribute(name, value);\n            }\n        }\n        for (let i = 0; i < element.childNodes.length; i++) {\n            if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n                svg.appendChild(element.childNodes[i].cloneNode(true));\n            }\n        }\n        return svg;\n    }\n    /**\n     * Sets the default attributes for an SVG element to be used as an icon.\n     */\n    _setSvgAttributes(svg, options) {\n        svg.setAttribute('fit', '');\n        svg.setAttribute('height', '100%');\n        svg.setAttribute('width', '100%');\n        svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n        svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n        if (options && options.viewBox) {\n            svg.setAttribute('viewBox', options.viewBox);\n        }\n        return svg;\n    }\n    /**\n     * Returns an Observable which produces the string contents of the given icon. Results may be\n     * cached, so future calls with the same URL may not cause another HTTP request.\n     */\n    _fetchIcon(iconConfig) {\n        var _a;\n        const { url: safeUrl, options } = iconConfig;\n        const withCredentials = (_a = options === null || options === void 0 ? void 0 : options.withCredentials) !== null && _a !== void 0 ? _a : false;\n        if (!this._httpClient) {\n            throw getMatIconNoHttpProviderError();\n        }\n        // TODO: add an ngDevMode check\n        if (safeUrl == null) {\n            throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n        }\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        // TODO: add an ngDevMode check\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n        // already a request in progress for that URL. It's necessary to call share() on the\n        // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n        const inProgressFetch = this._inProgressUrlFetches.get(url);\n        if (inProgressFetch) {\n            return inProgressFetch;\n        }\n        const req = this._httpClient.get(url, { responseType: 'text', withCredentials }).pipe(map(svg => {\n            // Security: This SVG is fetched from a SafeResourceUrl, and is thus\n            // trusted HTML.\n            return trustedHTMLFromString(svg);\n        }), finalize(() => this._inProgressUrlFetches.delete(url)), share());\n        this._inProgressUrlFetches.set(url, req);\n        return req;\n    }\n    /**\n     * Registers an icon config by name in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param iconName Name under which to register the config.\n     * @param config Config to be registered.\n     */\n    _addSvgIconConfig(namespace, iconName, config) {\n        this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n        return this;\n    }\n    /**\n     * Registers an icon set config in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param config Config to be registered.\n     */\n    _addSvgIconSetConfig(namespace, config) {\n        const configNamespace = this._iconSetConfigs.get(namespace);\n        if (configNamespace) {\n            configNamespace.push(config);\n        }\n        else {\n            this._iconSetConfigs.set(namespace, [config]);\n        }\n        return this;\n    }\n    /** Parses a config's text into an SVG element. */\n    _svgElementFromConfig(config) {\n        if (!config.svgElement) {\n            const svg = this._svgElementFromString(config.svgText);\n            this._setSvgAttributes(svg, config.options);\n            config.svgElement = svg;\n        }\n        return config.svgElement;\n    }\n    /** Tries to create an icon config through the registered resolver functions. */\n    _getIconConfigFromResolvers(namespace, name) {\n        for (let i = 0; i < this._resolvers.length; i++) {\n            const result = this._resolvers[i](name, namespace);\n            if (result) {\n                return isSafeUrlWithOptions(result)\n                    ? new SvgIconConfig(result.url, null, result.options)\n                    : new SvgIconConfig(result, null);\n            }\n        }\n        return undefined;\n    }\n}\nMatIconRegistry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatIconRegistry, deps: [{ token: i1.HttpClient, optional: true }, { token: i2.DomSanitizer }, { token: DOCUMENT, optional: true }, { token: i0.ErrorHandler }], target: i0.ɵɵFactoryTarget.Injectable });\nMatIconRegistry.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatIconRegistry, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatIconRegistry, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: i1.HttpClient, decorators: [{\n                        type: Optional\n                    }] }, { type: i2.DomSanitizer }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i0.ErrorHandler }];\n    } });\n/** @docs-private */\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, errorHandler, document) {\n    return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);\n}\n/** @docs-private */\nconst ICON_REGISTRY_PROVIDER = {\n    // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n    provide: MatIconRegistry,\n    deps: [\n        [new Optional(), new SkipSelf(), MatIconRegistry],\n        [new Optional(), HttpClient],\n        DomSanitizer,\n        ErrorHandler,\n        [new Optional(), DOCUMENT],\n    ],\n    useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg) {\n    return svg.cloneNode(true);\n}\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace, name) {\n    return namespace + ':' + name;\n}\nfunction isSafeUrlWithOptions(value) {\n    return !!(value.url && value.options);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nconst _MatIconBase = mixinColor(class {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n});\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nconst MAT_ICON_LOCATION = new InjectionToken('mat-icon-location', {\n    providedIn: 'root',\n    factory: MAT_ICON_LOCATION_FACTORY,\n});\n/** @docs-private */\nfunction MAT_ICON_LOCATION_FACTORY() {\n    const _document = inject(DOCUMENT);\n    const _location = _document ? _document.location : null;\n    return {\n        // Note that this needs to be a function, rather than a property, because Angular\n        // will only resolve it once, but we want the current path on each call.\n        getPathname: () => (_location ? _location.pathname + _location.search : ''),\n    };\n}\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n    'clip-path',\n    'color-profile',\n    'src',\n    'cursor',\n    'fill',\n    'filter',\n    'marker',\n    'marker-start',\n    'marker-mid',\n    'marker-end',\n    'mask',\n    'stroke',\n];\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\nclass MatIcon extends _MatIconBase {\n    constructor(elementRef, _iconRegistry, ariaHidden, _location, _errorHandler) {\n        super(elementRef);\n        this._iconRegistry = _iconRegistry;\n        this._location = _location;\n        this._errorHandler = _errorHandler;\n        this._inline = false;\n        /** Subscription to the current in-progress SVG icon request. */\n        this._currentIconFetch = Subscription.EMPTY;\n        // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n        // the right thing to do for the majority of icon use-cases.\n        if (!ariaHidden) {\n            elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n        }\n    }\n    /**\n     * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n     * the element the icon is contained in.\n     */\n    get inline() {\n        return this._inline;\n    }\n    set inline(inline) {\n        this._inline = coerceBooleanProperty(inline);\n    }\n    /** Name of the icon in the SVG icon set. */\n    get svgIcon() {\n        return this._svgIcon;\n    }\n    set svgIcon(value) {\n        if (value !== this._svgIcon) {\n            if (value) {\n                this._updateSvgIcon(value);\n            }\n            else if (this._svgIcon) {\n                this._clearSvgElement();\n            }\n            this._svgIcon = value;\n        }\n    }\n    /** Font set that the icon is a part of. */\n    get fontSet() {\n        return this._fontSet;\n    }\n    set fontSet(value) {\n        const newValue = this._cleanupFontValue(value);\n        if (newValue !== this._fontSet) {\n            this._fontSet = newValue;\n            this._updateFontIconClasses();\n        }\n    }\n    /** Name of an icon within a font set. */\n    get fontIcon() {\n        return this._fontIcon;\n    }\n    set fontIcon(value) {\n        const newValue = this._cleanupFontValue(value);\n        if (newValue !== this._fontIcon) {\n            this._fontIcon = newValue;\n            this._updateFontIconClasses();\n        }\n    }\n    /**\n     * Splits an svgIcon binding value into its icon set and icon name components.\n     * Returns a 2-element array of [(icon set), (icon name)].\n     * The separator for the two fields is ':'. If there is no separator, an empty\n     * string is returned for the icon set and the entire value is returned for\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\n     * Throws an error if the name contains two or more ':' separators.\n     * Examples:\n     *   `'social:cake' -> ['social', 'cake']\n     *   'penguin' -> ['', 'penguin']\n     *   null -> ['', '']\n     *   'a:b:c' -> (throws Error)`\n     */\n    _splitIconName(iconName) {\n        if (!iconName) {\n            return ['', ''];\n        }\n        const parts = iconName.split(':');\n        switch (parts.length) {\n            case 1:\n                return ['', parts[0]]; // Use default namespace.\n            case 2:\n                return parts;\n            default:\n                throw Error(`Invalid icon name: \"${iconName}\"`); // TODO: add an ngDevMode check\n        }\n    }\n    ngOnInit() {\n        // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n        // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n        this._updateFontIconClasses();\n    }\n    ngAfterViewChecked() {\n        const cachedElements = this._elementsWithExternalReferences;\n        if (cachedElements && cachedElements.size) {\n            const newPath = this._location.getPathname();\n            // We need to check whether the URL has changed on each change detection since\n            // the browser doesn't have an API that will let us react on link clicks and\n            // we can't depend on the Angular router. The references need to be updated,\n            // because while most browsers don't care whether the URL is correct after\n            // the first render, Safari will break if the user navigates to a different\n            // page and the SVG isn't re-rendered.\n            if (newPath !== this._previousPath) {\n                this._previousPath = newPath;\n                this._prependPathToReferences(newPath);\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._currentIconFetch.unsubscribe();\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n    }\n    _usingFontIcon() {\n        return !this.svgIcon;\n    }\n    _setSvgElement(svg) {\n        this._clearSvgElement();\n        // Note: we do this fix here, rather than the icon registry, because the\n        // references have to point to the URL at the time that the icon was created.\n        const path = this._location.getPathname();\n        this._previousPath = path;\n        this._cacheChildrenWithExternalReferences(svg);\n        this._prependPathToReferences(path);\n        this._elementRef.nativeElement.appendChild(svg);\n    }\n    _clearSvgElement() {\n        const layoutElement = this._elementRef.nativeElement;\n        let childCount = layoutElement.childNodes.length;\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n        // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n        // we can't use innerHTML, because IE will throw if the element has a data binding.\n        while (childCount--) {\n            const child = layoutElement.childNodes[childCount];\n            // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n            // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n            if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n                child.remove();\n            }\n        }\n    }\n    _updateFontIconClasses() {\n        if (!this._usingFontIcon()) {\n            return;\n        }\n        const elem = this._elementRef.nativeElement;\n        const fontSetClass = this.fontSet\n            ? this._iconRegistry.classNameForFontAlias(this.fontSet)\n            : this._iconRegistry.getDefaultFontSetClass();\n        if (fontSetClass != this._previousFontSetClass) {\n            if (this._previousFontSetClass) {\n                elem.classList.remove(this._previousFontSetClass);\n            }\n            if (fontSetClass) {\n                elem.classList.add(fontSetClass);\n            }\n            this._previousFontSetClass = fontSetClass;\n        }\n        if (this.fontIcon != this._previousFontIconClass) {\n            if (this._previousFontIconClass) {\n                elem.classList.remove(this._previousFontIconClass);\n            }\n            if (this.fontIcon) {\n                elem.classList.add(this.fontIcon);\n            }\n            this._previousFontIconClass = this.fontIcon;\n        }\n    }\n    /**\n     * Cleans up a value to be used as a fontIcon or fontSet.\n     * Since the value ends up being assigned as a CSS class, we\n     * have to trim the value and omit space-separated values.\n     */\n    _cleanupFontValue(value) {\n        return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n    }\n    /**\n     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n     * reference. This is required because WebKit browsers require references to be prefixed with\n     * the current path, if the page has a `base` tag.\n     */\n    _prependPathToReferences(path) {\n        const elements = this._elementsWithExternalReferences;\n        if (elements) {\n            elements.forEach((attrs, element) => {\n                attrs.forEach(attr => {\n                    element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n                });\n            });\n        }\n    }\n    /**\n     * Caches the children of an SVG element that have `url()`\n     * references that we need to prefix with the current path.\n     */\n    _cacheChildrenWithExternalReferences(element) {\n        const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n        const elements = (this._elementsWithExternalReferences =\n            this._elementsWithExternalReferences || new Map());\n        for (let i = 0; i < elementsWithFuncIri.length; i++) {\n            funcIriAttributes.forEach(attr => {\n                const elementWithReference = elementsWithFuncIri[i];\n                const value = elementWithReference.getAttribute(attr);\n                const match = value ? value.match(funcIriPattern) : null;\n                if (match) {\n                    let attributes = elements.get(elementWithReference);\n                    if (!attributes) {\n                        attributes = [];\n                        elements.set(elementWithReference, attributes);\n                    }\n                    attributes.push({ name: attr, value: match[1] });\n                }\n            });\n        }\n    }\n    /** Sets a new SVG icon with a particular name. */\n    _updateSvgIcon(rawName) {\n        this._svgNamespace = null;\n        this._svgName = null;\n        this._currentIconFetch.unsubscribe();\n        if (rawName) {\n            const [namespace, iconName] = this._splitIconName(rawName);\n            if (namespace) {\n                this._svgNamespace = namespace;\n            }\n            if (iconName) {\n                this._svgName = iconName;\n            }\n            this._currentIconFetch = this._iconRegistry\n                .getNamedSvgIcon(iconName, namespace)\n                .pipe(take(1))\n                .subscribe(svg => this._setSvgElement(svg), (err) => {\n                const errorMessage = `Error retrieving icon ${namespace}:${iconName}! ${err.message}`;\n                this._errorHandler.handleError(new Error(errorMessage));\n            });\n        }\n    }\n}\nMatIcon.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatIcon, deps: [{ token: i0.ElementRef }, { token: MatIconRegistry }, { token: 'aria-hidden', attribute: true }, { token: MAT_ICON_LOCATION }, { token: i0.ErrorHandler }], target: i0.ɵɵFactoryTarget.Component });\nMatIcon.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatIcon, selector: \"mat-icon\", inputs: { color: \"color\", inline: \"inline\", svgIcon: \"svgIcon\", fontSet: \"fontSet\", fontIcon: \"fontIcon\" }, host: { attributes: { \"role\": \"img\" }, properties: { \"attr.data-mat-icon-type\": \"_usingFontIcon() ? \\\"font\\\" : \\\"svg\\\"\", \"attr.data-mat-icon-name\": \"_svgName || fontIcon\", \"attr.data-mat-icon-namespace\": \"_svgNamespace || fontSet\", \"class.mat-icon-inline\": \"inline\", \"class.mat-icon-no-color\": \"color !== \\\"primary\\\" && color !== \\\"accent\\\" && color !== \\\"warn\\\"\" }, classAttribute: \"mat-icon notranslate\" }, exportAs: [\"matIcon\"], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, styles: [\".mat-icon{-webkit-user-select:none;user-select:none;background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatIcon, decorators: [{\n            type: Component,\n            args: [{ template: '<ng-content></ng-content>', selector: 'mat-icon', exportAs: 'matIcon', inputs: ['color'], host: {\n                        'role': 'img',\n                        'class': 'mat-icon notranslate',\n                        '[attr.data-mat-icon-type]': '_usingFontIcon() ? \"font\" : \"svg\"',\n                        '[attr.data-mat-icon-name]': '_svgName || fontIcon',\n                        '[attr.data-mat-icon-namespace]': '_svgNamespace || fontSet',\n                        '[class.mat-icon-inline]': 'inline',\n                        '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-icon{-webkit-user-select:none;user-select:none;background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: MatIconRegistry }, { type: undefined, decorators: [{\n                        type: Attribute,\n                        args: ['aria-hidden']\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_ICON_LOCATION]\n                    }] }, { type: i0.ErrorHandler }];\n    }, propDecorators: { inline: [{\n                type: Input\n            }], svgIcon: [{\n                type: Input\n            }], fontSet: [{\n                type: Input\n            }], fontIcon: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatIconModule {\n}\nMatIconModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatIconModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatIconModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatIconModule, declarations: [MatIcon], imports: [MatCommonModule], exports: [MatIcon, MatCommonModule] });\nMatIconModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatIconModule, imports: [[MatCommonModule], MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatIconModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule],\n                    exports: [MatIcon, MatCommonModule],\n                    declarations: [MatIcon],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ICON_REGISTRY_PROVIDER, ICON_REGISTRY_PROVIDER_FACTORY, MAT_ICON_LOCATION, MAT_ICON_LOCATION_FACTORY, MatIcon, MatIconModule, MatIconRegistry, getMatIconFailedToSanitizeLiteralError, getMatIconFailedToSanitizeUrlError, getMatIconNameNotFoundError, getMatIconNoHttpProviderError };\n"],"names":["i0","SecurityContext","Injectable","Optional","Inject","SkipSelf","ErrorHandler","InjectionToken","inject","Component","ViewEncapsulation","ChangeDetectionStrategy","Attribute","Input","NgModule","mixinColor","MatCommonModule","coerceBooleanProperty","DOCUMENT","of","throwError","forkJoin","Subscription","tap","map","catchError","finalize","share","take","i1","HttpClient","i2","DomSanitizer","policy","getPolicy","undefined","window","ttWindow","trustedTypes","createPolicy","createHTML","s","trustedHTMLFromString","html","_a","getMatIconNameNotFoundError","iconName","Error","getMatIconNoHttpProviderError","getMatIconFailedToSanitizeUrlError","url","getMatIconFailedToSanitizeLiteralError","literal","SvgIconConfig","constructor","svgText","options","MatIconRegistry","_httpClient","_sanitizer","document","_errorHandler","_svgIconConfigs","Map","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_resolvers","_defaultFontSetClass","_document","addSvgIcon","addSvgIconInNamespace","addSvgIconLiteral","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","addSvgIconResolver","resolver","push","cleanLiteral","sanitize","HTML","trustedLiteral","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","registerFontClassAlias","alias","className","set","classNameForFontAlias","get","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","cachedIcon","cloneSvg","_loadSvgIconFromConfig","pipe","svg","getNamedSvgIcon","name","key","iconKey","config","_getSvgFromConfig","_getIconConfigFromResolvers","iconSetConfigs","_getSvgFromIconSetConfigs","ngOnDestroy","clear","_svgElementFromConfig","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","filter","iconSetConfig","_loadSvgIconSetFromConfig","err","errorMessage","message","handleError","foundIcon","i","length","toString","indexOf","_extractSvgIconFromSet","_fetchIcon","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","nodeName","toLowerCase","_setSvgAttributes","_toSvgElement","_svgElementFromString","appendChild","str","div","createElement","innerHTML","element","attributes","value","setAttribute","childNodes","nodeType","ELEMENT_NODE","viewBox","iconConfig","withCredentials","inProgressFetch","req","responseType","delete","configNamespace","svgElement","result","isSafeUrlWithOptions","ɵfac","ɵprov","type","args","providedIn","decorators","ICON_REGISTRY_PROVIDER_FACTORY","parentRegistry","httpClient","sanitizer","errorHandler","ICON_REGISTRY_PROVIDER","provide","deps","useFactory","_MatIconBase","_elementRef","MAT_ICON_LOCATION","factory","MAT_ICON_LOCATION_FACTORY","_location","location","getPathname","pathname","search","funcIriAttributes","funcIriAttributeSelector","attr","join","funcIriPattern","MatIcon","elementRef","_iconRegistry","ariaHidden","_inline","_currentIconFetch","EMPTY","nativeElement","inline","svgIcon","_svgIcon","_updateSvgIcon","_clearSvgElement","fontSet","_fontSet","newValue","_cleanupFontValue","_updateFontIconClasses","fontIcon","_fontIcon","_splitIconName","parts","split","ngOnInit","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","size","newPath","_previousPath","_prependPathToReferences","unsubscribe","_usingFontIcon","_setSvgElement","path","_cacheChildrenWithExternalReferences","layoutElement","childCount","child","remove","elem","fontSetClass","_previousFontSetClass","classList","add","_previousFontIconClass","trim","elements","forEach","attrs","elementsWithFuncIri","querySelectorAll","elementWithReference","getAttribute","match","rawName","_svgNamespace","_svgName","subscribe","ElementRef","ɵcmp","template","selector","exportAs","inputs","host","encapsulation","None","changeDetection","OnPush","styles","MatIconModule","ɵmod","ɵinj","imports","exports","declarations"],"sourceRoot":"webpack:///"}